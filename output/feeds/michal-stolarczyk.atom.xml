<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>null log</title><link href="/" rel="alternate"></link><link href="/feeds/michal-stolarczyk.atom.xml" rel="self"></link><id>/</id><updated>2014-01-10T11:44:08+00:00</updated><entry><title>Gradle: adding new sourceSets while using IntelliJ Idea</title><link href="/gradle-adding-new-sourcesets-while-using-intellij-idea.html" rel="alternate"></link><updated>2014-01-10T11:44:08+00:00</updated><author><name>Michal Stolarczyk</name></author><id>tag:,2014-01-10:gradle-adding-new-sourcesets-while-using-intellij-idea.html</id><summary type="html">&lt;p&gt;From time to time having normal tests configured in my &lt;code&gt;Gradle&lt;/code&gt; build files is not enough - especially when I'm dealing with big, multi-module projects. There might be a need to either create a functional test or maybe test the behaviour of code while playing with new library. If unit tests are not enough in this case, it's better to create some kind of functional or integration one, especially that once it's done in a structured way, your colleagues will know where to go if they want to check something. &lt;/p&gt;
&lt;h3&gt;Gradle&lt;/h3&gt;
&lt;p&gt;In one project which I was working on, there was a need to add functionl tests - which is easilly doable in Gradle by introducing new sourceSets and new test task:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sourceSets&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

   &lt;span class="c1"&gt;// all other source sets&lt;/span&gt;

   &lt;span class="n"&gt;funcTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class="n"&gt;compileClasspath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sourceSets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sourceSets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;configurations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testRuntime&lt;/span&gt;
      &lt;span class="n"&gt;runtimeClasspath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sourceSets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sourceSets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;test&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;output&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;configurations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;testRuntime&lt;/span&gt;

      &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;srcDirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src/functest/java&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
      &lt;span class="n"&gt;resources&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;srcDirs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src/functest/resources/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The above defines a source set called &lt;code&gt;funcTest&lt;/code&gt;, which references sources from &lt;code&gt;src/functest/java&lt;/code&gt; in current project and resources from &lt;code&gt;src/functest/resources&lt;/code&gt;. It also is based on outputs from &lt;code&gt;main&lt;/code&gt; &amp;amp; &lt;code&gt;test&lt;/code&gt; sourceSets (which are defined earlier in a similar manner and not shown here).&lt;/p&gt;
&lt;p&gt;This alone is almost sufficient for gradle - if we want to refernce this source set from a gradle task (because currently it just exists without doing anything), we can create one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="nf"&gt;funcTest&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nl"&gt;type:&lt;/span&gt; &lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;testClassesDir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sourceSets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;funcTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;classesDir&lt;/span&gt;
   &lt;span class="n"&gt;classpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sourceSets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;funcTest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;runtimeClasspath&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This ads a &lt;code&gt;funcTest&lt;/code&gt; Gradle task (of type &lt;code&gt;Test&lt;/code&gt;) and configures classpath for it. Name doesn't need to match the name of previously created sourceSet as the biding part happens in &lt;code&gt;sourceSets.funcTest.output.classesDir&lt;/code&gt;. If it matches though, it will easilly show the relationship between those two. As usual with Gradle, you can run new task by typing &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;gradle&lt;/span&gt; &lt;span class="n"&gt;funcTest&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;in the command line.&lt;/p&gt;
&lt;h3&gt;IntelliJ Idea&lt;/h3&gt;
&lt;p&gt;So, now once Gradle is configured and will work on it's own, the next step is to make it work with Idea. Idea has really nice (though not flawless) integration with Gradle, but somehow it's not able to automatically deduct that we had just defined new test sources based on what we had just configured. Fix is quite easy though and it requires:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Importing &lt;code&gt;idea&lt;/code&gt; plugin in the build file (if it's not done yet):&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nn"&gt;idea&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ol&gt;
&lt;li&gt;Configuring the plugin to recognise directories with fuctional tests as test directories, not source ones:&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;idea&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;testSourceDirs&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src/functest/java&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;testSourceDirs&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;src/functest/resources&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And hopefully, now after either importing or refreshing the project using JetGradle it should get properly recognised.&lt;/p&gt;</summary><category term="gradle"></category><category term="intellij-idea"></category></entry><entry><title>Curl: PUT a file using HTTP basic auth</title><link href="/curl-put-a-file-using-http-basic-auth.html" rel="alternate"></link><updated>2014-01-07T15:57:18+00:00</updated><author><name>Michal Stolarczyk</name></author><id>tag:,2014-01-07:curl-put-a-file-using-http-basic-auth.html</id><summary type="html">&lt;p&gt;There is a myriad of ways how a file can be &lt;code&gt;PUT&lt;/code&gt; to a RESTful webservice. If you need to send one using HTTP basic authentication, here is one way to do this using &lt;code&gt;curl&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;username:password&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;PUT&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Content-Type: text/xml&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;@filepath&amp;quot;&lt;/span&gt;  &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//example.com/api/v1/putreceiver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Brief summary of options:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# sets the username and pass for HTTP basic auth&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;username:password&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;# specifies the HTTP verb which we will use as the request type&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;PUT&lt;/span&gt;

&lt;span class="cp"&gt;# adds extra header for content type&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Content-Type: text/xml&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;# attaches the file&lt;/span&gt;
&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;@filepath&amp;quot;&lt;/span&gt;

&lt;span class="cp"&gt;# address of the webservice&lt;/span&gt;
&lt;span class="nl"&gt;https:&lt;/span&gt;&lt;span class="c1"&gt;//example.com/api/v1/putreceiver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="curl"></category><category term="PUT"></category><category term="rest"></category><category term="note"></category></entry><entry><title>GPG Keys</title><link href="/gpg-keys.html" rel="alternate"></link><updated>2014-01-07T09:46:37+00:00</updated><author><name>Michal Stolarczyk</name></author><id>tag:,2014-01-07:gpg-keys.html</id><summary type="html">&lt;p&gt;From time to time I have a need to work with GPG keys - (i.e. when dealing with third party interfaces and encrypting files to be send). Usually keys which I'm using are being delivered to me - but especially when developing (&amp;amp; testing), I have a need to go back to command line and use gpg from within it. As each time when I'm doing so, I have to either read &lt;code&gt;man&lt;/code&gt; for &lt;code&gt;GPG&lt;/code&gt; or use Google, I just thought that I will put some of the most common things which I'm using in the blog post. &lt;/p&gt;
&lt;h3&gt;Generate GPG Key&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;gpg&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;gen&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;List GPG Keys&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;gpg&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Import GPG Key&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# public key&lt;/span&gt;
&lt;span class="n"&gt;gpg&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;public_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gpg&lt;/span&gt;

&lt;span class="cp"&gt;# secret key&lt;/span&gt;
&lt;span class="n"&gt;gpg&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;import&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;secret_key&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gpg&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Export GPG Key&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;# public key&lt;/span&gt;
&lt;span class="cp"&gt;# AAAAAA being the ID of the key from the command listing keys&lt;/span&gt;
&lt;span class="n"&gt;gpg&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;exported_key_pub&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gpg&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;armor&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;AAAAAA&lt;/span&gt;

&lt;span class="cp"&gt;# secret key&lt;/span&gt;
&lt;span class="cp"&gt;# AAAAAA being the ID of the key from key command listing keys&lt;/span&gt;
&lt;span class="n"&gt;gpg&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;exported_key_sec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gpg&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;armor&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;export&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="n"&gt;AAAAA&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="gpg"></category><category term="keys"></category></entry></feed>