<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on zerodivisible.io</title>
    <link>https://zerodivisible.io/blog/</link>
    <description>Recent content in Blogs on zerodivisible.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 18 Jan 2015 18:38:28 +0000</lastBuildDate>
    
	<atom:link href="https://zerodivisible.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Archlinux and AUR packages signed With untrusted GPG key</title>
      <link>https://zerodivisible.io/blog/archlinux-and-aur-packages-signed-with-untrusted-gpg-key/</link>
      <pubDate>Sun, 18 Jan 2015 18:38:28 +0000</pubDate>
      
      <guid>https://zerodivisible.io/blog/archlinux-and-aur-packages-signed-with-untrusted-gpg-key/</guid>
      <description>Archlinux is my main Linux distribution. It might have a steep learning curve, but once configured, it works like a charm. Just don&amp;rsquo;t leave it unused for few months - once back, you&amp;rsquo;ll you won&amp;rsquo;t recognize the OS. Oh, and don&amp;rsquo;t do updates just before whatever deadlines you have for the stuff you&amp;rsquo;re working on.
Recently I&amp;rsquo;ve been mostly using CentOS &amp;amp; RedHat Linux at work, so I had been playing with those OSs at home too.</description>
    </item>
    
    <item>
      <title>Capturing gifs from desktop on OS X</title>
      <link>https://zerodivisible.io/blog/capturing-gifs-from-desktop-on-os-x/</link>
      <pubDate>Sun, 11 Jan 2015 00:04:03 +0000</pubDate>
      
      <guid>https://zerodivisible.io/blog/capturing-gifs-from-desktop-on-os-x/</guid>
      <description>From time to time, I&amp;rsquo;m finding a need to record a portion of my desktop, upload it and share with somebody. On OSX, one way which worked for me was using a nifty tool called GifGrabber.
Available for free from the App Store, makes the whole process as painless as it can be. Features are limitied, but honestly - it has exactly what you want: you can capture a part of desktop, edit it, setting the starting point, and upload it to gfycat, getting a link in return.</description>
    </item>
    
    <item>
      <title>Using Emacs&#39;s ansi-term with ZSH</title>
      <link>https://zerodivisible.io/blog/using-emacss-ansi-term-with-zsh/</link>
      <pubDate>Sun, 04 Jan 2015 20:47:00 +0000</pubDate>
      
      <guid>https://zerodivisible.io/blog/using-emacss-ansi-term-with-zsh/</guid>
      <description>Emacs has a million and one shells which you can run interactively from within the editor. When my login shell was set to ZSH though - and I was running Emacs on OS X, none of the terminal emulators built into Emacs was could display ANSI escape codes correctly. Solution which worked for me was described on StackOverflow and required:
 adding the following snippet somewhere in the init config:  ;; Use Emacs terminfo, not system terminfo (setq system-uses-terminfo nil)   obtaining a copy of eterm-color.</description>
    </item>
    
    <item>
      <title>Gradle: adding new sourceSets recognized from Intellij IDEA</title>
      <link>https://zerodivisible.io/blog/gradle-adding-new-sourcesets-recognized-from-intellij-idea/</link>
      <pubDate>Fri, 10 Jan 2014 11:44:08 +0000</pubDate>
      
      <guid>https://zerodivisible.io/blog/gradle-adding-new-sourcesets-recognized-from-intellij-idea/</guid>
      <description>Some of the bigger projects which I&amp;rsquo;ve been working on recently have a bit more complex Gradle build scripts for them. One nifty thing which I thought that it would be worth documenting is how one of such projects is dealing with multi-module projects - and having a separate build target configured for running functional tests for it.From time to time having normal tests configured in my Gradle build files is not enough - especially when I&amp;rsquo;m dealing with big, multi-module projects.</description>
    </item>
    
    <item>
      <title>Curl: PUT a File using HTTP Basic Auth</title>
      <link>https://zerodivisible.io/blog/curl-put-a-file-using-http-basic-auth/</link>
      <pubDate>Tue, 07 Jan 2014 15:57:18 +0000</pubDate>
      
      <guid>https://zerodivisible.io/blog/curl-put-a-file-using-http-basic-auth/</guid>
      <description>When testing a local webservice, I needed to upload a file, with HTTP Basic Authentication. Quick googling returned a cURL onliner, which got the job done:
curl -u &amp;quot;username:password&amp;quot; -X PUT -H &amp;quot;Content-Type: text/xml&amp;quot; -d &amp;quot;@filepath&amp;quot; https://example.com/api/v1/putreceiver  Explanation of what exactly was passed as arguments:
# sets the username and pass for HTTP basic auth -u &amp;quot;username:password&amp;quot; # specifies the HTTP verb which we will use as the request type -X PUT # adds extra header for content type -H &amp;quot;Content-Type: text/xml&amp;quot; # attaches the file -d &amp;quot;@filepath&amp;quot; # address of the webservice https://example.</description>
    </item>
    
    <item>
      <title>GPG Keys</title>
      <link>https://zerodivisible.io/blog/gpg-keys/</link>
      <pubDate>Tue, 07 Jan 2014 09:46:37 +0000</pubDate>
      
      <guid>https://zerodivisible.io/blog/gpg-keys/</guid>
      <description>I didn&amp;rsquo;t have much chances to work with GPG - and when I usually do, it&amp;rsquo;s to communicate with third-party services, when exchanging encrypted files. Usually keys which I&amp;rsquo;m using are being delivered to me - but especially when developing (&amp;amp; testing), I have a need to get back to the command line and somehow generate a key for myself. Each time when doing this, instead of reaching to man, I thought that I may document the command on this blog:</description>
    </item>
    
  </channel>
</rss>